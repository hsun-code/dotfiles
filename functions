#!/usr/bin/env bash

# Create a new directory and enter it
function mkd() {
	mkdir -p "$@" && cd "$_";
}

# Open one directory and list the content
function c() {
	cd "$@" && ls;
}

# Determine size of a file or total size of a directory
function fs() {
	if du -b /dev/null > /dev/null 2>&1; then
		local arg=-sbh;
	else
		local arg=-sh;
	fi
	if [[ -n "$@" ]]; then
		du $arg -- "$@";
	else
		du $arg .[^.]* ./*;
	fi;
}

# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.
function tre() {
	tree -aC -I '.git|node_modules|bower_components' --dirsfirst -L 3 "$@" | less -FRNX;
}

# Get colors in manual pages
man() {
	env \
		LESS_TERMCAP_mb="$(printf '\e[1;31m')" \
		LESS_TERMCAP_md="$(printf '\e[1;31m')" \
		LESS_TERMCAP_me="$(printf '\e[0m')" \
		LESS_TERMCAP_se="$(printf '\e[0m')" \
		LESS_TERMCAP_so="$(printf '\e[1;44;33m')" \
		LESS_TERMCAP_ue="$(printf '\e[0m')" \
		LESS_TERMCAP_us="$(printf '\e[1;32m')" \
		man "$@"
}

function mypull() {
  echo "Pull the latest code for my personal repos"
  cd ${HOME}/hsun-code.code/dotfiles && git pull origin master && cd -
  cd ${HOME}/hsun-code.code/misc && git pull origin master && cd -
  cd ${HOME}/hsun-code.code/NvChad && git pull origin master && cd -
  echo "Install the lastest dotfiles"
  bash ${HOME}/hsun-code.code/dotfiles/install
}

# Create one docker container
# $1: container name
# $2: docker image
function my_newcontainer() {
  local _name=$1
  local _image=$2
  if [[ $# -eq 2 ]] ; then
    docker run --init -h $_name -id --name $_name -e USER=root --privileged \
      --oom-score-adj=900 -v /mnt/ceph:/mnt/ceph $_image
  else
    echo "Bad arguments are passed: exit!"
  fi
}

# Create compile_commands.json for jdk project
# Note that it's under one jdk src dir now.
function my_ccls_jdk() {
  echo "Try to generate compile_commands.json for OpenJDK. Ref: doc/ide.md"
  bash ./configure --with-boot-jdk=$HOME/libs/boot-jdk-aarch64 --with-debug-level=fastdebug
  make compile-commands
  ls build/linux-aarch64-server-fastdebug/compile_commands.json
  mv build/linux-aarch64-server-fastdebug/compile_commands.json .
}

